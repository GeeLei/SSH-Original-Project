<?xml version="1.0" encoding="UTF-8"?>
<b:beans xmlns:b="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/security" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/security classpath:/org/springframework/security/config/spring-security-3.2.xsd
    http://www.springframework.org/schema/beans classpath:/org/springframework/beans/factory/xml/spring-beans-4.0.xsd">
	
	<global-method-security>
<!-- 		<protect-pointcut expression="execution(* com.ejkyz.serviceplatform.service.sys.AuthorityService.*(..))" access="ROLE_ADMIN,ROLE_RESTRICTED_ADMIN,ROLE_USER" /> -->
	</global-method-security>
	
	<http pattern="/static/**" security="none" />
	
	<!--auto可以自动配置过滤器链，不会造成混乱异常 ，可以自己设置自己的登陆页面-->
	<http auto-config="true" use-expressions="true" > <!--允许使用表达式 -->
	
	<!-- 配置哪些路径需要过滤保护 ，可以是jsp也可以是action;access配置角色，用‘,’隔开-->
<!-- 		<intercept-url pattern="/**" access="permitAll" /> -->
	
	<!-- 
		对应action，表达式
		<security:intercept-url pattern="/main/admin" access="hasRole('ROLE_ADMIN')"/>  
        <security:intercept-url pattern="/main/common" access="hasRole('ROLE_USER')"/>  
		
		  表示通过 /auth/login这个映射进行登录. 
		如果验证失败则返回一个URL:/auth/login?error=true 
		如果登录成功则默认指向:/main/common 
		 
		        <security:form-login  
                login-page="/auth/login"    
                authentication-failure-url="/auth/login?error=true"    
                default-target-url="/main/common"/>  
               
        <security:logout    
                invalidate-session="true"    
                logout-success-url="/auth/login"    
                logout-url="/auth/logout"/>  
       
    </security:http>  
       
         指定一个自定义的authentication-manager :customUserDetailsService   
    <security:authentication-manager>  
            <security:authentication-provider user-service-ref="customUserDetailsService">  
                    <security:password-encoder ref="passwordEncoder"/>  
            </security:authentication-provider>  
    </security:authentication-manager>  
       
            对密码进行MD5编码  
    <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>  
  
       
        通过 customUserDetailsService,Spring会自动的用户的访问级别.   
        也可以理解成:以后我们和数据库操作就是通过customUserDetailsService来进行关联.   
   一个自定义的service用来和数据库进行操作. 即以后我们要通过数据库保存权限.则需要我们继承UserDetailsService  
      
    <bean id="customUserDetailsService" class="org.liukai.tutorial.service.CustomUserDetailsService"/>  
		 -->
		<remember-me />
	</http>
	
	
	<authentication-manager>
		<authentication-provider>   <!--认证的提供者，提供认证人信息  -->
			<user-service>          <!-- 两个用户 -->
				<user name="user" password="password" authorities="ROLE_USER" />
				<user name="admin" password="password" authorities="ROLE_USER,ROLE_ADMIN" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
	
</b:beans>